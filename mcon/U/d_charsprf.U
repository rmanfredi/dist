?RCS: $Id$
?RCS:
?RCS: Copyright (c) 1991-1997, 2004-2006, Raphael Manfredi
?RCS:
?RCS: You may redistribute only under the terms of the Artistic License,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic License; a copy of which may be found at the root
?RCS: of the source tree for dist 4.0.
?RCS:
?RCS: $Log: d_charsprf.U,v $
?RCS: Revision 3.0  1993/08/18  12:05:49  ram
?RCS: Baseline for dist 3.0 netwide release.
?RCS:
?MAKE:d_charsprf: cat rm +cc Setvar
?MAKE:	-pick add $@ %<
?S:d_charsprf:
?S:	This variable conditionally defines CHARSPRINTF if this system
?S:	declares "char *sprintf()" in stdio.h.  The trend seems to be to
?S:	declare it as "int sprintf()".
?S:.
?C:CHARSPRINTF:
?C:	This symbol is defined if this system declares "char *sprintf()" in
?C:	stdio.h.  The trend seems to be to declare it as "int sprintf()".  It
?C:	is up to the package author to declare sprintf correctly based on the
?C:	symbol.
?C:.
?H:#$d_charsprf	CHARSPRINTF 	/**/
?H:.
?F:!ucbsprf.c !ucbsprf
?LINT:set d_charsprf
: see if sprintf is declared as int or pointer to char
echo " "
$cat >ucbsprf.c <<'EOF'
int main()
{
	int sprintf();
	char buf[10];
	exit((unsigned long)sprintf(buf,"%s","foo") > 10L);
}
EOF
if $cc -o ucbsprf ucbsprf.c >/dev/null 2>&1 && ./ucbsprf; then
	echo "Your sprintf() returns (int)." >&4
	val="$undef"
else
	echo "Your sprintf() returns (char*)." >&4
	val="$define"
fi
set d_charsprf
eval $setvar
$rm -f ucbsprf*

