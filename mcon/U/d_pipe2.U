?RCS:
?RCS: Copyright (c) 2015, Raphael Manfredi
?RCS:
?RCS: You may redistribute only under the terms of the Artistic License,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic License; a copy of which may be found at the root
?RCS: of the source tree for dist 4.0.
?RCS:
?MAKE:d_pipe2: Trylink cat i_unistd i_sysfile
?MAKE:	-pick add $@ %<
?S:d_pipe2:
?S:	This variable conditionally defines the HAS_PIPE2 symbol, which
?S:	indicates to the C program that the pipe2() routine is available
?S:	to create an inter-process channel with some flags.
?S:.
?C:HAS_PIPE2:
?C:	This symbol, if defined, indicates that the pipe routine is
?C:	available to create an inter-process channel with O_CLOEXEC or
?C:	O_NONBLOCK flags.
?C:.
?H:#$d_pipe2 HAS_PIPE2		/**/
?H:.
?LINT:set d_pipe2
: see if pipe2 exists
$cat >try.c <<EOC
#$i_unistd I_UNISTD
#$i_sysfile I_SYS_FILE
#ifdef I_UNISTD
#include <unistd.h>
#endif
#ifdef I_SYS_FILE
#include <sys/file.h>	/* For O_* constants */
#endif
#include <fcntl.h>		/* For O_* constants */
int main(void)
{
	static int fds[2], ret;
	ret |= pipe2(fds, O_CLOEXEC | O_NONBLOCK);
	return ret ? 0 : 1;
}
EOC
cyn=pipe2
set d_pipe2
eval $trylink

