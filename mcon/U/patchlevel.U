?RCS: $Id$
?RCS:
?RCS: Copyright (c) 1991-1997, 2004-2006, Raphael Manfredi
?RCS:
?RCS: You may redistribute only under the terms of the Artistic License,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic License; a copy of which may be found at the root
?RCS: of the source tree for dist 4.0.
?RCS:
?RCS: $Log: patchlevel.U,v $
?RCS: Revision 3.0.1.1  1997/02/28  16:18:41  ram
?RCS: patch61: added support for src.U
?RCS:
?RCS: Revision 3.0  1993/08/18  12:09:31  ram
?RCS: Baseline for dist 3.0 netwide release.
?RCS:
?MAKE:patchlevel revision: package baserev test rsrc
?MAKE:	-pick add $@ %<
?T:Revision
?S:patchlevel:
?S:	The patchlevel level of this package.
?S:	The value of patchlevel comes from the patchlevel.h file.
?S:.
?S:revision:
?S:	The revision / build of this package.
?S:	The value is derived from the REVISION define in the revision.h file.
?S: When revision is defined, the patch level should be ignored if 0.
?S:.
: get the patchlevel / revision
echo " "
echo "Getting the current patchlevel / revision..." >&4
if $test -r $rsrc/patchlevel.h;then
	patchlevel=`awk \
		'/^#[ 	]*define[ 	][ 	]*PATCHLEVEL/ {print $3}' \
		< $rsrc/patchlevel.h`
else
	patchlevel=0
fi
?X:
?X: Can handle either one of:
?X:
?X:	#define REVISION word
?X: #define REVISION "$Revision$"
?X:
if $test -r $rsrc/revision.h;then
	revision=`awk \
		'/^#[ 	]*define[ 	][ 	]*REVISION/ {print $3}' \
		< $rsrc/revision.h`
	case "$revision" in
	'"$Revision:')
		revision=`awk \
			'/^#[ 	]*define[ 	][ 	]*REVISION/ {print $4}' \
			< $rsrc/revision.h`
		;;
	esac
else
	revision=0
fi
case "$revision" in
0) echo "(You have $package $baserev PL$patchlevel.)" ;;
*)
	case "$patchlevel" in
	0) echo "(You have $package $baserev-$revision)";;
	*) echo "(You have $package $baserev-$revision PL$patchlevel)";;
	esac
	;;
esac

