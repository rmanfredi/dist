?RCS: $Id$
?RCS:
?RCS: Copyright (c) 1991-1997, 2004-2006, Raphael Manfredi
?RCS:
?RCS: You may redistribute only under the terms of the Artistic License,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic License; a copy of which may be found at the root
?RCS: of the source tree for dist 4.0.
?RCS:
?RCS: $Log: d_getpgrp.U,v $
?RCS: Revision 3.0.1.1  1997/02/28  15:34:28  ram
?RCS: patch61: new USE_BSD_GETPGRP to detect the getpgrp() flavour
?RCS:
?RCS: Revision 3.0  1993/08/18  12:06:15  ram
?RCS: Baseline for dist 3.0 netwide release.
?RCS:
?MAKE:d_getpgrp d_bsdgetpgrp: Trylink Setvar cat i_unistd
?MAKE:	-pick add $@ %<
?S:d_getpgrp:
?S:	This variable conditionally defines HAS_GETPGRP if getpgrp() is
?S:	available to get the current process group.
?S:.
?S:d_bsdgetpgrp:
?S:	This variable conditionally defines USE_BSD_GETPGRP if
?S:	getpgrp needs one arguments whereas USG one needs none.
?S:.
?C:HAS_GETPGRP (GETPGRP):
?C:	This symbol, if defined, indicates that the getpgrp routine is
?C:	available to get the current process group.
?C:.
?C:USE_BSD_GETPGRP:
?C:	This symbol, if defined, indicates that getpgrp needs one
?C:	arguments whereas the USG one needs none.
?C:.
?H:#$d_getpgrp HAS_GETPGRP		/**/
?H:#$d_bsdgetpgrp USE_BSD_GETPGRP	/**/
?H:.
?LINT:set d_getpgrp d_bsdgetpgrp
: see if getpgrp exists
$cat >try.c <<EOC
#include <sys/types.h>
#$i_unistd I_UNISTD
#ifdef I_UNISTD
#include <unistd.h>
#endif
int main(void)
{
	static pid_t ret, pid;
	ret |= getpgrp(pid);
	return ret ? 0 : 1;
}
EOC
cyn="whether you have a BSD-like getpgrp()"
set d_bsdgetpgrp
eval $trylink

case "$d_bsdgetpgrp" in
$define)
	val="$define"
	set d_getpgrp
	eval $setvar
	;;
*)
	$cat >try.c <<EOC
#include <sys/types.h>
#$i_unistd I_UNISTD
#ifdef I_UNISTD
#include <unistd.h>
#endif
int main(void)
{
	static pid_t ret;
	ret |= getpgrp();
	return ret ? 0 : 1;
}
EOC
	cyn="whether you have a USG-like getpgrp() instead"
	set d_getpgrp
	eval $trylink
	;;
esac

