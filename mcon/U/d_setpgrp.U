?RCS: $Id$
?RCS:
?RCS: Copyright (c) 1991-1997, 2004-2006, Raphael Manfredi
?RCS:
?RCS: You may redistribute only under the terms of the Artistic License,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic License; a copy of which may be found at the root
?RCS: of the source tree for dist 4.0.
?RCS:
?RCS: $Log: d_setpgrp.U,v $
?RCS: Revision 3.0.1.3  1997/02/28  15:44:16  ram
?RCS: patch61: obsoleted USE_BSDGRP in favor of USE_BSD_SETPGRP
?RCS: patch61: another unit now also defines a USE_BSD_GETPGRP
?RCS: patch61: fallback for test program failure improved
?RCS:
?RCS: Revision 3.0.1.2  1995/07/25  13:59:30  ram
?RCS: patch56: re-arranged compile line to include ldflags before objects
?RCS:
?RCS: Revision 3.0.1.1  1994/10/29  16:15:37  ram
?RCS: patch36: added 'ldflags' to the test compile line (ADO)
?RCS: patch36: call ./usg explicitely instead of relying on PATH
?RCS:
?RCS: Revision 3.0  1993/08/18  12:07:09  ram
?RCS: Baseline for dist 3.0 netwide release.
?RCS:
?MAKE:d_setpgrp d_bsdsetpgrp: Trylink Setvar cat i_unistd
?MAKE:	-pick add $@ %<
?S:d_setpgrp:
?S:	This variable conditionally defines HAS_SETPGRP if setpgrp() is
?S:	available to set the current process group.
?S:.
?S:d_bsdsetpgrp (d_bsdpgrp):
?S:	This variable conditionally defines USE_BSD_SETPGRP if
?S:	setpgrp needs two arguments whereas USG one needs none.
?S:	See also d_setpgid for a POSIX interface.
?S:.
?C:HAS_SETPGRP (SETPGRP):
?C:	This symbol, if defined, indicates that the setpgrp routine is
?C:	available to set the current process group.
?C:.
?C:USE_BSD_SETPGRP (USE_BSDPGRP BSDPGRP):
?C:	This symbol, if defined, indicates that setpgrp needs two
?C:	arguments whereas USG one needs none.  See also HAS_SETPGID
?C:	for a POSIX interface.
?C:.
?H:#$d_setpgrp HAS_SETPGRP		/**/
?H:#$d_bsdsetpgrp USE_BSD_SETPGRP	/**/
?H:.
?LINT:set d_setpgrp d_bsdsetpgrp
: see if setpgrp exists
$cat >try.c <<EOC
#include <sys/types.h>
#$i_unistd I_UNISTD
#ifdef I_UNISTD
#include <unistd.h>
#endif
int main(void)
{
	static pid_t ret, pid, pgrp;
	ret |= setpgrp(pid, pgrp);
	return ret ? 0 : 1;
}
EOC
cyn="whether you have the BSD flavour of setpgrp()"
set d_bsdsetpgrp
eval $trylink

case "$d_bsdsetpgrp" in
$define)
	val="$define"
	set d_setpgrp
	eval $setvar
	;;
*)
	$cat >try.c <<EOC
#include <sys/types.h>
#$i_unistd I_UNISTD
#ifdef I_UNISTD
#include <unistd.h>
#endif
int main(void)
{
	static pid_t ret;
	ret |= setpgrp();
	if (ret)
		return 1;
	return 0;
}
EOC
	cyn="whether you have the USG flavour of setpgrp() then"
	set d_setpgrp
	eval $trylink
	;;
esac

