?RCS: $Id$
?RCS:
?RCS: Copyright (c) 1991-1997, 2004-2006, Raphael Manfredi
?RCS:
?RCS: You may redistribute only under the terms of the Artistic License,
?RCS: as specified in the README file that comes with the distribution.
?RCS: You may reuse parts of this distribution only within the terms of
?RCS: that same Artistic License; a copy of which may be found at the root
?RCS: of the source tree for dist 4.0.
?RCS:
?RCS: $Log: d_poll.U,v $
?RCS: Revision 3.0.1.2  1997/02/28  15:38:17  ram
?RCS: patch61: mention that <poll.h> can be included if HAS_POLL defined
?RCS:
?RCS: Revision 3.0.1.1  1995/01/11  15:26:31  ram
?RCS: patch45: created
?RCS:
?MAKE:d_poll: Trylink cat i_poll i_syspoll
?MAKE:	-pick add $@ %<
?S:d_poll:
?S:	This variable conditionally defines the HAS_POLL symbol, which
?S:	indicates to the C program that the poll() routine is available
?S:	to poll active file descriptors.
?S:.
?C:HAS_POLL :
?C:	This symbol, if defined, indicates that the poll routine is
?C:	available to poll active file descriptors.  Please check I_POLL and
?C:	I_SYS_POLL to know which header should be included as well.
?C:.
?H:#$d_poll HAS_POLL		/**/
?H:.
?LINT:set d_poll
: see if poll exists
$cat >try.c <<EOC
#include <sys/types.h>
#$i_syspoll I_SYS_POLL
#ifdef I_SYS_POLL
#include <sys/poll.h>
#endif
#$i_poll I_POLL
#ifdef I_POLL
#include <poll.h>
#endif
int main(void)
{
	static int ret, timeout;
	static unsigned n;
	static struct pollfd pfd;
	pfd.fd |= 1;
	pfd.revents |= 1;
	pfd.events |= POLLIN;
	pfd.events |= POLLOUT;
	pfd.events |= POLLPRI;
	pfd.events |= POLLERR;
	pfd.events |= POLLHUP;
	pfd.events |= POLLNVAL;
	ret |= poll(&pfd, n, timeout);
	return ret ? 0 : 1;
}
EOC
cyn=poll
set d_poll
eval $trylink

